{
  "address": "0xD2972808ffEd601182C69b972cF14d4F552d06B5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPremium",
          "type": "bool"
        }
      ],
      "name": "HelpRequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "helper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "solution",
          "type": "string"
        }
      ],
      "name": "HelpRequestResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "helper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "skills",
          "type": "string[]"
        }
      ],
      "name": "HelperRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "helper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "bio",
          "type": "string"
        }
      ],
      "name": "UserProfileUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "categoryRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_category",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isPremium",
          "type": "bool"
        }
      ],
      "name": "createHelpRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getHelpRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isResolved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isPremium",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "helper",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "solution",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "resolvedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct SafeNest.HelpRequest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_category",
          "type": "string"
        }
      ],
      "name": "getHelpRequestsByCategory",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlatformStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalRequests",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalHelpProvided",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalHelpers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_platformBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserHelpProvided",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserHelpRequests",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserProfile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "bio",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "helpRequestsCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "helpProvidedCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reputation",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isVerified",
              "type": "bool"
            },
            {
              "internalType": "string[]",
              "name": "skills",
              "type": "string[]"
            }
          ],
          "internalType": "struct SafeNest.UserProfile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "helpRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isResolved",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPremium",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "helper",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "solution",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "resolvedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHelper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_solution",
          "type": "string"
        }
      ],
      "name": "provideHelp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_bio",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_skills",
          "type": "string[]"
        }
      ],
      "name": "registerAsHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setPlatformFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalHelpProvided",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalHelpRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_bio",
          "type": "string"
        }
      ],
      "name": "updateProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userHelpProvided",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userHelpRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userProfiles",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "bio",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "helpRequestsCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "helpProvidedCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reputation",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_helper",
          "type": "address"
        }
      ],
      "name": "verifyHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4c82191e91e3f97e6444ea21dfb77c96421c083103eb2aea621f5ed0a349dd1a",
  "receipt": {
    "to": null,
    "from": "0xA889121299B61D09A75088CEc84D4Fc2E76D2ed7",
    "contractAddress": "0xD2972808ffEd601182C69b972cF14d4F552d06B5",
    "transactionIndex": 0,
    "gasUsed": "2332028",
    "logsBloom": "0x
    "blockHash": "0x0002ccd0000004f299583e269ef4741477ffe12432f057b4f0a9e56fb76e0609",
    "transactionHash": "0x4c82191e91e3f97e6444ea21dfb77c96421c083103eb2aea621f5ed0a349dd1a",
    "logs": [],
    "blockNumber": 60317134,
    "cumulativeGasUsed": "2332028",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0ada7a5da3d26f26d8ea40f0e25e5925",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPremium\",\"type\":\"bool\"}],\"name\":\"HelpRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"solution\",\"type\":\"string\"}],\"name\":\"HelpRequestResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"skills\",\"type\":\"string[]\"}],\"name\":\"HelperRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"}],\"name\":\"UserProfileUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"categoryRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isPremium\",\"type\":\"bool\"}],\"name\":\"createHelpRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getHelpRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isResolved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPremium\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"solution\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"resolvedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SafeNest.HelpRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"}],\"name\":\"getHelpRequestsByCategory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRequests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalHelpProvided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalHelpers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platformBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserHelpProvided\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserHelpRequests\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"helpRequestsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"helpProvidedCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"skills\",\"type\":\"string[]\"}],\"internalType\":\"struct SafeNest.UserProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"helpRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isResolved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPremium\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"solution\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"resolvedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHelper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_solution\",\"type\":\"string\"}],\"name\":\"provideHelp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_bio\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_skills\",\"type\":\"string[]\"}],\"name\":\"registerAsHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHelpProvided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHelpRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_bio\",\"type\":\"string\"}],\"name\":\"updateProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userHelpProvided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userHelpRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userProfiles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"helpRequestsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"helpProvidedCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_helper\",\"type\":\"address\"}],\"name\":\"verifyHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"SafeNest Team\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createHelpRequest(string,string,string,bool)\":{\"notice\":\"Create a new help request\"},\"getHelpRequest(uint256)\":{\"notice\":\"Get help request details\"},\"getHelpRequestsByCategory(string)\":{\"notice\":\"Get help requests by category\"},\"getPlatformStats()\":{\"notice\":\"Get platform statistics\"},\"getUserHelpProvided(address)\":{\"notice\":\"Get user's help provided\"},\"getUserHelpRequests(address)\":{\"notice\":\"Get user's help requests\"},\"getUserProfile(address)\":{\"notice\":\"Get user profile\"},\"provideHelp(uint256,string)\":{\"notice\":\"Provide help for a request\"},\"registerAsHelper(string,string,string[])\":{\"notice\":\"Register as a helper\"},\"setPlatformFee(uint256)\":{\"notice\":\"Set platform fee (only owner)\"},\"updateProfile(string,string)\":{\"notice\":\"Update user profile\"},\"verifyHelper(address)\":{\"notice\":\"Verify a helper (only owner)\"},\"withdrawFees()\":{\"notice\":\"Withdraw platform fees (only owner)\"}},\"notice\":\"SafeNest - A decentralized help and support system Allows users to request help, provide assistance, and manage community support\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourContract.sol\":\"SafeNest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/YourContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n// Useful for debugging. Remove when deploying to a live network.\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\\r\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * SafeNest - A decentralized help and support system\\r\\n * Allows users to request help, provide assistance, and manage community support\\r\\n * @author SafeNest Team\\r\\n */\\r\\ncontract SafeNest {\\r\\n    // State Variables\\r\\n    address public immutable owner;\\r\\n    string public platformName = \\\"SafeNest - Decentralized Help Platform\\\";\\r\\n    uint256 public totalHelpRequests = 0;\\r\\n    uint256 public totalHelpProvided = 0;\\r\\n    uint256 public platformFee = 0.01 ether; // 0.01 ETH fee for premium help requests\\r\\n    \\r\\n    // Help Request Structure\\r\\n    struct HelpRequest {\\r\\n        uint256 id;\\r\\n        address requester;\\r\\n        string title;\\r\\n        string description;\\r\\n        string category;\\r\\n        uint256 reward;\\r\\n        bool isResolved;\\r\\n        bool isPremium;\\r\\n        uint256 createdAt;\\r\\n        address helper;\\r\\n        string solution;\\r\\n        uint256 resolvedAt;\\r\\n    }\\r\\n    \\r\\n    // User Profile Structure\\r\\n    struct UserProfile {\\r\\n        string name;\\r\\n        string bio;\\r\\n        uint256 helpRequestsCount;\\r\\n        uint256 helpProvidedCount;\\r\\n        uint256 reputation;\\r\\n        bool isVerified;\\r\\n        string[] skills;\\r\\n    }\\r\\n    \\r\\n    // Mappings\\r\\n    mapping(uint256 => HelpRequest) public helpRequests;\\r\\n    mapping(address => UserProfile) public userProfiles;\\r\\n    mapping(address => uint256[]) public userHelpRequests;\\r\\n    mapping(address => uint256[]) public userHelpProvided;\\r\\n    mapping(string => uint256[]) public categoryRequests;\\r\\n    mapping(address => bool) public isHelper;\\r\\n    \\r\\n    // Events\\r\\n    event HelpRequestCreated(\\r\\n        uint256 indexed requestId,\\r\\n        address indexed requester,\\r\\n        string title,\\r\\n        string category,\\r\\n        uint256 reward,\\r\\n        bool isPremium\\r\\n    );\\r\\n    \\r\\n    event HelpRequestResolved(\\r\\n        uint256 indexed requestId,\\r\\n        address indexed helper,\\r\\n        string solution\\r\\n    );\\r\\n    \\r\\n    event UserProfileUpdated(address indexed user, string name, string bio);\\r\\n    event HelperRegistered(address indexed helper, string[] skills);\\r\\n    event RewardClaimed(uint256 indexed requestId, address indexed helper, uint256 amount);\\r\\n    \\r\\n    // Constructor\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n    \\r\\n    // Modifiers\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyHelper() {\\r\\n        require(isHelper[msg.sender], \\\"Not a registered helper\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier validRequestId(uint256 _requestId) {\\r\\n        require(_requestId < totalHelpRequests, \\\"Invalid request ID\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyRequesterOrHelper(uint256 _requestId) {\\r\\n        HelpRequest storage request = helpRequests[_requestId];\\r\\n        require(\\r\\n            msg.sender == request.requester || msg.sender == request.helper,\\r\\n            \\\"Not authorized\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Create a new help request\\r\\n     */\\r\\n    function createHelpRequest(\\r\\n        string memory _title,\\r\\n        string memory _description,\\r\\n        string memory _category,\\r\\n        bool _isPremium\\r\\n    ) public payable returns (uint256) {\\r\\n        require(bytes(_title).length > 0, \\\"Title cannot be empty\\\");\\r\\n        require(bytes(_description).length > 0, \\\"Description cannot be empty\\\");\\r\\n        require(bytes(_category).length > 0, \\\"Category cannot be empty\\\");\\r\\n        \\r\\n        if (_isPremium) {\\r\\n            require(msg.value >= platformFee, \\\"Insufficient fee for premium request\\\");\\r\\n        }\\r\\n        \\r\\n        uint256 requestId = totalHelpRequests;\\r\\n        uint256 reward = _isPremium ? msg.value - platformFee : 0;\\r\\n        \\r\\n        helpRequests[requestId] = HelpRequest({\\r\\n            id: requestId,\\r\\n            requester: msg.sender,\\r\\n            title: _title,\\r\\n            description: _description,\\r\\n            category: _category,\\r\\n            reward: reward,\\r\\n            isResolved: false,\\r\\n            isPremium: _isPremium,\\r\\n            createdAt: block.timestamp,\\r\\n            helper: address(0),\\r\\n            solution: \\\"\\\",\\r\\n            resolvedAt: 0\\r\\n        });\\r\\n        \\r\\n        userHelpRequests[msg.sender].push(requestId);\\r\\n        categoryRequests[_category].push(requestId);\\r\\n        totalHelpRequests++;\\r\\n        \\r\\n        emit HelpRequestCreated(requestId, msg.sender, _title, _category, reward, _isPremium);\\r\\n        \\r\\n        return requestId;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Register as a helper\\r\\n     */\\r\\n    function registerAsHelper(string memory _name, string memory _bio, string[] memory _skills) public {\\r\\n        require(bytes(_name).length > 0, \\\"Name cannot be empty\\\");\\r\\n        require(_skills.length > 0, \\\"Must provide at least one skill\\\");\\r\\n        \\r\\n        userProfiles[msg.sender] = UserProfile({\\r\\n            name: _name,\\r\\n            bio: _bio,\\r\\n            helpRequestsCount: 0,\\r\\n            helpProvidedCount: 0,\\r\\n            reputation: 0,\\r\\n            isVerified: false,\\r\\n            skills: _skills\\r\\n        });\\r\\n        \\r\\n        isHelper[msg.sender] = true;\\r\\n        \\r\\n        emit HelperRegistered(msg.sender, _skills);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Provide help for a request\\r\\n     */\\r\\n    function provideHelp(uint256 _requestId, string memory _solution) \\r\\n        public \\r\\n        onlyHelper \\r\\n        validRequestId(_requestId) \\r\\n    {\\r\\n        HelpRequest storage request = helpRequests[_requestId];\\r\\n        require(!request.isResolved, \\\"Request already resolved\\\");\\r\\n        require(request.helper == address(0), \\\"Request already assigned\\\");\\r\\n        \\r\\n        request.helper = msg.sender;\\r\\n        request.solution = _solution;\\r\\n        request.isResolved = true;\\r\\n        request.resolvedAt = block.timestamp;\\r\\n        \\r\\n        // Update user stats\\r\\n        userProfiles[msg.sender].helpProvidedCount++;\\r\\n        userProfiles[request.requester].helpRequestsCount++;\\r\\n        userProfiles[msg.sender].reputation += 10; // Reputation points for helping\\r\\n        \\r\\n        totalHelpProvided++;\\r\\n        \\r\\n        // Transfer reward to helper\\r\\n        if (request.reward > 0) {\\r\\n            (bool success, ) = msg.sender.call{value: request.reward}(\\\"\\\");\\r\\n            require(success, \\\"Failed to transfer reward\\\");\\r\\n        }\\r\\n        \\r\\n        userHelpProvided[msg.sender].push(_requestId);\\r\\n        \\r\\n        emit HelpRequestResolved(_requestId, msg.sender, _solution);\\r\\n        emit RewardClaimed(_requestId, msg.sender, request.reward);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Get help request details\\r\\n     */\\r\\n    function getHelpRequest(uint256 _requestId) \\r\\n        public \\r\\n        view \\r\\n        validRequestId(_requestId) \\r\\n        returns (HelpRequest memory) \\r\\n    {\\r\\n        return helpRequests[_requestId];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Get user profile\\r\\n     */\\r\\n    function getUserProfile(address _user) public view returns (UserProfile memory) {\\r\\n        return userProfiles[_user];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Get help requests by category\\r\\n     */\\r\\n    function getHelpRequestsByCategory(string memory _category) \\r\\n        public \\r\\n        view \\r\\n        returns (uint256[] memory) \\r\\n    {\\r\\n        return categoryRequests[_category];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Get user's help requests\\r\\n     */\\r\\n    function getUserHelpRequests(address _user) public view returns (uint256[] memory) {\\r\\n        return userHelpRequests[_user];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Get user's help provided\\r\\n     */\\r\\n    function getUserHelpProvided(address _user) public view returns (uint256[] memory) {\\r\\n        return userHelpProvided[_user];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Update user profile\\r\\n     */\\r\\n    function updateProfile(string memory _name, string memory _bio) public {\\r\\n        require(bytes(_name).length > 0, \\\"Name cannot be empty\\\");\\r\\n        \\r\\n        userProfiles[msg.sender].name = _name;\\r\\n        userProfiles[msg.sender].bio = _bio;\\r\\n        \\r\\n        emit UserProfileUpdated(msg.sender, _name, _bio);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Verify a helper (only owner)\\r\\n     */\\r\\n    function verifyHelper(address _helper) public onlyOwner {\\r\\n        require(isHelper[_helper], \\\"User is not a helper\\\");\\r\\n        userProfiles[_helper].isVerified = true;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Set platform fee (only owner)\\r\\n     */\\r\\n    function setPlatformFee(uint256 _newFee) public onlyOwner {\\r\\n        platformFee = _newFee;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Withdraw platform fees (only owner)\\r\\n     */\\r\\n    function withdrawFees() public onlyOwner {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0, \\\"No fees to withdraw\\\");\\r\\n        \\r\\n        (bool success, ) = owner.call{value: balance}(\\\"\\\");\\r\\n        require(success, \\\"Failed to withdraw fees\\\");\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Get platform statistics\\r\\n     */\\r\\n    function getPlatformStats() public view returns (\\r\\n        uint256 _totalRequests,\\r\\n        uint256 _totalHelpProvided,\\r\\n        uint256 _totalHelpers,\\r\\n        uint256 _platformBalance\\r\\n    ) {\\r\\n        return (\\r\\n            totalHelpRequests,\\r\\n            totalHelpProvided,\\r\\n            // Note: This is a simplified count - in production, you'd want to track this properly\\r\\n            totalHelpRequests, // Placeholder for total helpers\\r\\n            address(this).balance\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Function that allows the contract to receive ETH\\r\\n     */\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xc04913b1453d83c36c052ebe0526660853574db8043990de910a40bd8d16df21\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0806040523462000100576000908154916001928381811c91168015620000f5575b6020821014620000e157601f8111620000b2575b508083604d8255818052656174666f726d60d01b81602084207f536166654e657374202d20446563656e7472616c697a65642048656c7020506c8155015555600255662386f26fc10000600355336080526126739081620001068239608051818181611a5601528181611c3201528181611ce00152611ebe0152f35b8180526002601f60208420920160051c820191015b818110620000d6575062000036565b8281558401620000c7565b634e487b7160e01b82526022600452602482fd5b90607f169062000022565b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806306e7b83f1461210d57806307895f4214611ef457806312e8e2c314611ea7578063136d888314611e7357806326232a2e14611e55578063332d56d714611db4578063476343ee14611ccd5780634d8255bb14611c0a578063556909d114611b9257806371c69ec714611b275780637e59f8ff14611add5780637ffe79b114611a855780638da5cb5b14611a40578063987ee156146118b3578063a7ed7a071461183b578063b4af94411461181d578063bdb7bff214611776578063bfe00daa14611737578063c9d3cc6a1461146d578063d721fe021461138a578063d867892114610b5b578063d9258e1c1461075b578063ea2384051461014b5763eea472dc0361000e5734610146576000366003190112610146576020600254604051908152f35b600080fd5b34610146576060366003190112610146576004356001600160401b0381116101465761017b90369060040161240a565b6024356001600160401b0381116101465761019a90369060040161240a565b90604435916001600160401b03831161014657366023840112156101465782600401356101c6816124db565b936101d4604051958661228f565b8185526024602086019260051b820101903682116101465760248101925b82841061072c57505050506102098251151561254d565b8251156106e7576040519161021d83612274565b82526020820152600060408201526000606082015260006080820152600060a08201528160c082015233600052600560205260406000209181519283516001600160401b03811161050057610272825461221e565b601f81116106b5575b506020601f821160011461064c578192939495600092610641575b50508160011b916000199060031b1c19161781555b60208301519283516001600160401b038111610500576102ce600184015461221e565b601f811161060c575b506020601f821160011461059957819060c094959660009261058e575b50508160011b916000199060031b1c19161760018401555b60408101516002840155606081015160038401556080810151600484015561034960a08201511515600585019060ff801983541691151516179055565b0151805190600160401b8211610500576006830154826006850155808310610516575b5060206006910192016000526020600020916000905b8282106103e057843360005260096020526040600020600160ff198254161790557fbcb7ccc32684e5e7484edb37450012fe4fb3ecfa3ff7abc69960493ab65af19a60405160208152806103db3394602083019061247f565b0390a2005b80518051906001600160401b038211610500576103fd865461221e565b601f81116104c3575b50602090601f8311600114610453579282600194936020938695600092610448575b5050600019600383901b1c191690841b1787555b01940191019092610382565b015190508a80610428565b908660005260206000209160005b601f19851681106104ab575083602093600196938796938794601f19811610610492575b505050811b01875561043c565b015160001960f88460031b161c191690558a8080610485565b91926020600181928685015181550194019201610461565b6104f090876000526020600020601f850160051c810191602086106104f6575b601f0160051c01906124f2565b87610406565b90915081906104e3565b634e487b7160e01b600052604160045260246000fd5b600684016000526020600020908382015b818301811061053757505061036c565b806105446001925461221e565b80610551575b5001610527565b601f811183146105675750600081555b8861054a565b600090828252610585601f60208420920160051c82018583016124f2565b81835555610561565b0151905086806102f4565b6001840160005260206000209560005b601f19841681106105f4575095829160c0959697600194601f198116106105db575b505050811b01600184015561030c565b015160001960f88460031b161c191690558680806105cb565b828201518855600190970196602092830192016105a9565b61063b90600185016000526020600020601f840160051c810191602085106104f657601f0160051c01906124f2565b856102d7565b015190508580610296565b8260005260206000209060005b601f198416811061069d575060019394959683601f19811610610684575b505050811b0181556102ab565b015160001960f88460031b161c19169055858080610677565b9091602060018192858b015181550193019101610659565b6106e190836000526020600020601f840160051c810191602085106104f657601f0160051c01906124f2565b8561027b565b60405162461bcd60e51b815260206004820152601f60248201527f4d7573742070726f76696465206174206c65617374206f6e6520736b696c6c006044820152606490fd5b83356001600160401b0381116101465760209161075083926024369187010161240a565b8152019301926101f2565b34610146576040366003190112610146576001600160401b036024358181116101465761078c90369060040161240a565b9033600052600960205260ff6040600020541615610b16576107b360015460043510612590565b600435600052600460205260406000209060ff600683015416610ad1576008820180546001600160a01b038116610a8c576001600160a01b03191633179055825190811161050057610808600983015461221e565b601f8111610a57575b50806020601f82116001146109ea576000916109df575b508160011b916000199060031b1c19161760098201555b600160ff1960068301541617600682015542600a8201553360005260056020526003604060002001610871815461253e565b905560018101546001600160a01b03166000908152600560205260409020600201805461089d9061253e565b90553360005260056020526004604060002001908154600a81018091116109c957600592556108cd60025461253e565b6002550190815480610967575b503360005260076020526108f46004356040600020612509565b60405190602082527faadd7ea1c2858caa96c851e7250c7fa3238ff6b214f981b34c4fa7a275ea8ec1339280610931600435946020830190612379565b0390a35460405190815233907f24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb7602060043592a3005b600080808093335af16109786125d1565b501561098457826108da565b60405162461bcd60e51b815260206004820152601960248201527f4661696c656420746f207472616e7366657220726577617264000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b905083015184610828565b91506009830160005260206000206000925b601f1983168410610a3f576001935082601f19811610610a26575b5050811b01600982015561083f565b85015160001960f88460031b161c191690558480610a17565b858101518255602093840193600190920191016109fc565b610a8690600984016000526020600020601f840160051c810191602085106104f657601f0160051c01906124f2565b83610811565b60405162461bcd60e51b815260206004820152601860248201527f5265717565737420616c72656164792061737369676e656400000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f5265717565737420616c7265616479207265736f6c76656400000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4e6f74206120726567697374657265642068656c7065720000000000000000006044820152606490fd5b6080366003190112610146576004356001600160401b03811161014657610b8690369060040161240a565b6024356001600160401b03811161014657610ba590369060040161240a565b906044356001600160401b03811161014657610bc590369060040161240a565b9060643580151581036101465781511561134d57835115611308578251156112c35780611268575b6001549281156112605760035434033481116109c957925b60405195610c1287612258565b85875233602088015281604088015260608701528160808701528360a0870152600060c087015282151560e08701524261010087015260006101208701526040518060208101106001600160401b036020830111176105005760208101604052600081526101408701526000610160870152846000526004602052604060002092865184556001840160018060a01b036020890151166bffffffffffffffffffffffff60a01b82541617905560408701518051906001600160401b038211610500578190610ce3600288015461221e565b601f811161122b575b50602090601f83116001146111b9576000926111ae575b50508160011b916000199060031b1c19161760028501555b60608701518051906001600160401b038211610500578190610d40600388015461221e565b601f8111611179575b50602090601f8311600114611107576000926110fc575b50508160011b916000199060031b1c19161760038501555b60808701518051906001600160401b038211610500578190610d9d600488015461221e565b601f81116110c7575b50602090601f83116001146110555760009261104a575b50508160011b916000199060031b1c19161760048501555b60a0870151600585015560068401610dff60c08901511515829060ff801983541691151516179055565b60e0880151151561ff0082549160081b169061ff00191617905561010087015160078501556008840160018060a01b03610120890151166bffffffffffffffffffffffff60a01b825416179055610140870151928351976001600160401b038911610500576020988895610e76600989015461221e565b601f8111611017575b508a90601f8311600114610f7657610f509493837f2c99cc9c7e043c62a4e31fde7a935b24aeeb92abc6e08ddd792f3b4668910ca5999a94600a9461016094600092610f6b575b50508160011b916000199060031b1c19161760098501555b01519101553360005260068952610ef9866040600020612509565b610f20866040518b818551610f118183858a01612356565b81016008815203019020612509565b610f2b60015461253e565b600155610f4360405194608086526080860190612379565b908482038a860152612379565b946040830152151560608201528033940390a3604051908152f35b015190508f80610ec6565b97929190600984016000528b6000209860005b601f1984168110610ffd5750926001837f2c99cc9c7e043c62a4e31fde7a935b24aeeb92abc6e08ddd792f3b4668910ca59a9b61016094610f50999897600a97601f19811610610fe4575b505050811b016009850155610ede565b015160001960f88460031b161c191690558f8080610fd4565b828201518b556001909a01998c9950918d01918d01610f89565b6110449060098a016000528c600020601f850160051c8101918e86106104f657601f0160051c01906124f2565b8b610e7f565b015190508980610dbd565b9250600487016000526020600020906000935b601f19841685106110ac576001945083601f19811610611093575b505050811b016004850155610dd5565b015160001960f88460031b161c19169055898080611083565b81810151835560209485019460019093019290910190611068565b6110f690600489016000526020600020601f850160051c810191602086106104f657601f0160051c01906124f2565b8a610da6565b015190508980610d60565b9250600387016000526020600020906000935b601f198416851061115e576001945083601f19811610611145575b505050811b016003850155610d78565b015160001960f88460031b161c19169055898080611135565b8181015183556020948501946001909301929091019061111a565b6111a890600389016000526020600020601f850160051c810191602086106104f657601f0160051c01906124f2565b8a610d49565b015190508980610d03565b9250600287016000526020600020906000935b601f1984168510611210576001945083601f198116106111f7575b505050811b016002850155610d1b565b015160001960f88460031b161c191690558980806111e7565b818101518355602094850194600190930192909101906111cc565b61125a90600289016000526020600020601f850160051c810191602086106104f657601f0160051c01906124f2565b8a610cec565b600092610c05565b600354341015610bed5760405162461bcd60e51b8152602060048201526024808201527f496e73756666696369656e742066656520666f72207072656d69756d207265716044820152631d595cdd60e21b6064820152608490fd5b60405162461bcd60e51b815260206004820152601860248201527f43617465676f72792063616e6e6f7420626520656d70747900000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f4465736372697074696f6e2063616e6e6f7420626520656d70747900000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260156024820152745469746c652063616e6e6f7420626520656d70747960581b6044820152606490fd5b3461014657600036600319011261014657604051600080546113ab8161221e565b8084529060019081811690811561144657506001146113ed575b6113e9846113d58186038261228f565b604051918291602083526020830190612379565b0390f35b600080805292507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061142e5750505081016020016113d5826113c5565b80546020858701810191909152909301928101611416565b60ff191660208087019190915292151560051b850190920192506113d591508390506113c5565b34610146576040366003190112610146576001600160401b036004358181116101465761149e90369060040161240a565b602435828111610146576114b690369060040161240a565b916114c38251151561254d565b3360005260056020918183526040600020845190828211610500576114e8815461221e565b91601f92838111611701575b50808684821160011461169d57600091611692575b508160011b916000199060031b1c19161790555b336000528284526001908160406000200193875193841161050057611542855461221e565b82811161165a575b5050849083116001146115cd579282806103db946115b397947fc13dafd9d9a1258e2f2de748cef0b799dbcc614ed620f5b0564ae615a759795c99976000936115c2575b501b916000199060031b1c19161790555b604051938493604085526040850190612379565b90838203908401523395612379565b8b015192508b61158e565b601f9291921982169084600052856000209160005b8181106116455750927fc13dafd9d9a1258e2f2de748cef0b799dbcc614ed620f5b0564ae615a759795c9795926103db9592826115b399961061162c575b5050811b01905561159f565b8a015160001960f88460031b161c191690558980611620565b898301518455928501929187019187016115e2565b6116829186600052876000209084808801821c8301938a8910611689575b01901c01906124f2565b878061154a565b93508293611678565b905087015189611509565b60008481528881209250601f198416905b898b8383106116ec5750505090836001949392106116d3575b5050811b01905561151d565b89015160001960f88460031b161c1916905589806116c7565b840151855560019094019392830192016116ae565b61172890836000528760002085808501891c8201928a861061172e575b01881c01906124f2565b886114f4565b9250819261171e565b34610146576020366003190112610146576001600160a01b0361175861239e565b166000526009602052602060ff604060002054166040519015158152f35b3461014657602080600319360112610146576004356001600160401b03811161014657816117ab6117be92369060040161240a565b8160405193828580945193849201612356565b8101600881520301902090604051908181845491828152019360005281600020916000905b828210611806576113e9856117fa8189038261228f565b604051918291826123b4565b8354865294850194600193840193909101906117e3565b34610146576000366003190112610146576020600154604051908152f35b3461014657602080600319360112610146576001600160a01b0361185d61239e565b1660005260078152604060002090604051908181845491828152019360005281600020916000905b82821061189c576113e9856117fa8189038261228f565b835486529485019460019384019390910190611885565b34610146576020806003193601126101465760c0906118d061239e565b6040516118dc81612274565b606093818580935282858201526000604082015260008382015260006080820152600060a0820152015260018060a01b0316600052600581526040600020906040519161192883612274565b611931816122b0565b83526001936119418583016122b0565b9083850191825260028301549260408601938452600381015482870190815260048201549060808801918252600660ff6005850154169360a08a0194151585520193845461198e816124db565b9561199c604051978861228f565b81875260009081528981208a88015b838310611a25575050505088995060c06113e99899019485526119fb6119e58a60e06040519d8e9d8e5251918d01526101008c0190612379565b965196601f1997888c83030160408d0152612379565b9651908901525160808801525160a087015251151560c086015251908483030160e085015261247f565b8d8c8192611a32856122b0565b8152019201920191906119ab565b34610146576000366003190112610146576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461014657604036600319011261014657611a9e61239e565b6001600160a01b031660009081526007602052604090208054602435919082101561014657602091611acf91612451565b90546040519160031b1c8152f35b3461014657604036600319011261014657611af661239e565b6001600160a01b031660009081526006602052604090208054602435919082101561014657602091611acf91612451565b34610146576040366003190112610146576004356001600160401b03811161014657611b5790369060040161240a565b611b736020602435928160405193828580945193849201612356565b81016008815203019020805482101561014657602091611acf91612451565b3461014657602080600319360112610146576001600160a01b03611bb461239e565b1660005260068152604060002090604051908181845491828152019360005281600020916000905b828210611bf3576113e9856117fa8189038261228f565b835486529485019460019384019390910190611bdc565b3461014657602036600319011261014657611c2361239e565b6001600160a01b0390611c59337f0000000000000000000000000000000000000000000000000000000000000000841614612601565b1680600052600960205260ff6040600020541615611c915760005260056020526005604060002001600160ff19825416179055600080f35b60405162461bcd60e51b81526020600482015260146024820152732ab9b2b91034b9903737ba1030903432b63832b960611b6044820152606490fd5b34610146576000366003190112610146577f0000000000000000000000000000000000000000000000000000000000000000611d13336001600160a01b03831614612601565b47908115611d7957600080809381935af1611d2c6125d1565b5015611d3457005b60405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f20776974686472617720666565730000000000000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152724e6f206665657320746f20776974686472617760681b6044820152606490fd5b34610146576020366003190112610146576001600160a01b03611dd561239e565b166000526005602052611e2c6040600020611def816122b0565b90611dfc600182016122b0565b6002820154916003810154611e3a60ff60056004850154940154169360405197889760c0895260c0890190612379565b908782036020890152612379565b93604086015260608501526080840152151560a08301520390f35b34610146576000366003190112610146576020600354604051908152f35b3461014657600036600319011261014657608060015460025490479060405192818452602084015260408301526060820152f35b3461014657602036600319011261014657611eec337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614612601565b600435600355005b34610146576020366003190112610146576004356000610160604051611f1981612258565b82815282602082015260606040820152606080820152606060808201528260a08201528260c08201528260e0820152826101008201528261012082015260606101408201520152611f6d6001548210612590565b60005260046020526040600020600a60405191611f8983612258565b8054835260018101546001600160a01b03166020840152611fac600282016122b0565b6040840152611fbd600382016122b0565b6060840152611fce600482016122b0565b6080840152600581015460a0840152600681015460ff818116151560c0860152600891821c16151560e085015260078201546101008501528101546001600160a01b0316610120840152612024600982016122b0565b61014084015201546101608201526040518091602082528051602083015260018060a01b0360208201511660408301526101606121006120a761209161207b604086015161018060608901526101a0880190612379565b6060860151878203601f19016080890152612379565b6080850151868203601f190160a0880152612379565b60a084015160c086015260c0840151151560e086015260e0840151151561010086015261010084015161012086015260018060a01b0361012085015116610140860152610140840151601f198683030184870152612379565b9101516101808301520390f35b3461014657602036600319011261014657600435600052600460205260406000208054600160a01b6001900380600184015416926002810161214e906122b0565b9161215b600383016122b0565b612167600484016122b0565b91600584015492600685015490600786015492600887015416936009870161218e906122b0565b96600a0154976040519a8b9a8b5260208b01526101808060408c01528a016121b591612379565b89810360608b01526121c691612379565b88810360808a01526121d791612379565b9360a088015260ff8116151560c088015260081c60ff16151560e087015261010086015261012085015283810361014085015261221391612379565b906101608301520390f35b90600182811c9216801561224e575b602083101461223857565b634e487b7160e01b600052602260045260246000fd5b91607f169161222d565b61018081019081106001600160401b0382111761050057604052565b60e081019081106001600160401b0382111761050057604052565b90601f801991011681019081106001600160401b0382111761050057604052565b90604051918260008254926122c48461221e565b90818452600194858116908160001461233357506001146122f0575b50506122ee9250038361228f565b565b9093915060005260209081600020936000915b81831061231b5750506122ee935082010138806122e0565b85548884018501529485019487945091830191612303565b9150506122ee94506020925060ff191682840152151560051b82010138806122e0565b60005b8381106123695750506000910152565b8181015183820152602001612359565b9060209161239281518092818552858086019101612356565b601f01601f1916010190565b600435906001600160a01b038216820361014657565b6020908160408183019282815285518094520193019160005b8281106123db575050505090565b8351855293810193928101926001016123cd565b6001600160401b03811161050057601f01601f191660200190565b81601f8201121561014657803590612421826123ef565b9261242f604051948561228f565b8284526020838301011161014657816000926020809301838601378301015290565b80548210156124695760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b908082519081815260208091019281808460051b8301019501936000915b8483106124ad5750505050505090565b90919293949584806124cb600193601f198682030187528a51612379565b980193019301919493929061249d565b6001600160401b0381116105005760051b60200190565b8181106124fd575050565b600081556001016124f2565b8054600160401b8110156105005761252691600182018155612451565b819291549060031b91821b91600019901b1916179055565b60001981146109c95760010190565b1561255457565b60405162461bcd60e51b81526020600482015260146024820152734e616d652063616e6e6f7420626520656d70747960601b6044820152606490fd5b1561259757565b60405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c995c5d595cdd08125160721b6044820152606490fd5b3d156125fc573d906125e2826123ef565b916125f0604051938461228f565b82523d6000602084013e565b606090565b1561260857565b60405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329037bbb732b960991b6044820152606490fdfea264697066735822122069b4d620c70f1085c396d9f438afb4439a3084494d50b8b0953d777b076efb6d64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806306e7b83f1461210d57806307895f4214611ef457806312e8e2c314611ea7578063136d888314611e7357806326232a2e14611e55578063332d56d714611db4578063476343ee14611ccd5780634d8255bb14611c0a578063556909d114611b9257806371c69ec714611b275780637e59f8ff14611add5780637ffe79b114611a855780638da5cb5b14611a40578063987ee156146118b3578063a7ed7a071461183b578063b4af94411461181d578063bdb7bff214611776578063bfe00daa14611737578063c9d3cc6a1461146d578063d721fe021461138a578063d867892114610b5b578063d9258e1c1461075b578063ea2384051461014b5763eea472dc0361000e5734610146576000366003190112610146576020600254604051908152f35b600080fd5b34610146576060366003190112610146576004356001600160401b0381116101465761017b90369060040161240a565b6024356001600160401b0381116101465761019a90369060040161240a565b90604435916001600160401b03831161014657366023840112156101465782600401356101c6816124db565b936101d4604051958661228f565b8185526024602086019260051b820101903682116101465760248101925b82841061072c57505050506102098251151561254d565b8251156106e7576040519161021d83612274565b82526020820152600060408201526000606082015260006080820152600060a08201528160c082015233600052600560205260406000209181519283516001600160401b03811161050057610272825461221e565b601f81116106b5575b506020601f821160011461064c578192939495600092610641575b50508160011b916000199060031b1c19161781555b60208301519283516001600160401b038111610500576102ce600184015461221e565b601f811161060c575b506020601f821160011461059957819060c094959660009261058e575b50508160011b916000199060031b1c19161760018401555b60408101516002840155606081015160038401556080810151600484015561034960a08201511515600585019060ff801983541691151516179055565b0151805190600160401b8211610500576006830154826006850155808310610516575b5060206006910192016000526020600020916000905b8282106103e057843360005260096020526040600020600160ff198254161790557fbcb7ccc32684e5e7484edb37450012fe4fb3ecfa3ff7abc69960493ab65af19a60405160208152806103db3394602083019061247f565b0390a2005b80518051906001600160401b038211610500576103fd865461221e565b601f81116104c3575b50602090601f8311600114610453579282600194936020938695600092610448575b5050600019600383901b1c191690841b1787555b01940191019092610382565b015190508a80610428565b908660005260206000209160005b601f19851681106104ab575083602093600196938796938794601f19811610610492575b505050811b01875561043c565b015160001960f88460031b161c191690558a8080610485565b91926020600181928685015181550194019201610461565b6104f090876000526020600020601f850160051c810191602086106104f6575b601f0160051c01906124f2565b87610406565b90915081906104e3565b634e487b7160e01b600052604160045260246000fd5b600684016000526020600020908382015b818301811061053757505061036c565b806105446001925461221e565b80610551575b5001610527565b601f811183146105675750600081555b8861054a565b600090828252610585601f60208420920160051c82018583016124f2565b81835555610561565b0151905086806102f4565b6001840160005260206000209560005b601f19841681106105f4575095829160c0959697600194601f198116106105db575b505050811b01600184015561030c565b015160001960f88460031b161c191690558680806105cb565b828201518855600190970196602092830192016105a9565b61063b90600185016000526020600020601f840160051c810191602085106104f657601f0160051c01906124f2565b856102d7565b015190508580610296565b8260005260206000209060005b601f198416811061069d575060019394959683601f19811610610684575b505050811b0181556102ab565b015160001960f88460031b161c19169055858080610677565b9091602060018192858b015181550193019101610659565b6106e190836000526020600020601f840160051c810191602085106104f657601f0160051c01906124f2565b8561027b565b60405162461bcd60e51b815260206004820152601f60248201527f4d7573742070726f76696465206174206c65617374206f6e6520736b696c6c006044820152606490fd5b83356001600160401b0381116101465760209161075083926024369187010161240a565b8152019301926101f2565b34610146576040366003190112610146576001600160401b036024358181116101465761078c90369060040161240a565b9033600052600960205260ff6040600020541615610b16576107b360015460043510612590565b600435600052600460205260406000209060ff600683015416610ad1576008820180546001600160a01b038116610a8c576001600160a01b03191633179055825190811161050057610808600983015461221e565b601f8111610a57575b50806020601f82116001146109ea576000916109df575b508160011b916000199060031b1c19161760098201555b600160ff1960068301541617600682015542600a8201553360005260056020526003604060002001610871815461253e565b905560018101546001600160a01b03166000908152600560205260409020600201805461089d9061253e565b90553360005260056020526004604060002001908154600a81018091116109c957600592556108cd60025461253e565b6002550190815480610967575b503360005260076020526108f46004356040600020612509565b60405190602082527faadd7ea1c2858caa96c851e7250c7fa3238ff6b214f981b34c4fa7a275ea8ec1339280610931600435946020830190612379565b0390a35460405190815233907f24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb7602060043592a3005b600080808093335af16109786125d1565b501561098457826108da565b60405162461bcd60e51b815260206004820152601960248201527f4661696c656420746f207472616e7366657220726577617264000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b905083015184610828565b91506009830160005260206000206000925b601f1983168410610a3f576001935082601f19811610610a26575b5050811b01600982015561083f565b85015160001960f88460031b161c191690558480610a17565b858101518255602093840193600190920191016109fc565b610a8690600984016000526020600020601f840160051c810191602085106104f657601f0160051c01906124f2565b83610811565b60405162461bcd60e51b815260206004820152601860248201527f5265717565737420616c72656164792061737369676e656400000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f5265717565737420616c7265616479207265736f6c76656400000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4e6f74206120726567697374657265642068656c7065720000000000000000006044820152606490fd5b6080366003190112610146576004356001600160401b03811161014657610b8690369060040161240a565b6024356001600160401b03811161014657610ba590369060040161240a565b906044356001600160401b03811161014657610bc590369060040161240a565b9060643580151581036101465781511561134d57835115611308578251156112c35780611268575b6001549281156112605760035434033481116109c957925b60405195610c1287612258565b85875233602088015281604088015260608701528160808701528360a0870152600060c087015282151560e08701524261010087015260006101208701526040518060208101106001600160401b036020830111176105005760208101604052600081526101408701526000610160870152846000526004602052604060002092865184556001840160018060a01b036020890151166bffffffffffffffffffffffff60a01b82541617905560408701518051906001600160401b038211610500578190610ce3600288015461221e565b601f811161122b575b50602090601f83116001146111b9576000926111ae575b50508160011b916000199060031b1c19161760028501555b60608701518051906001600160401b038211610500578190610d40600388015461221e565b601f8111611179575b50602090601f8311600114611107576000926110fc575b50508160011b916000199060031b1c19161760038501555b60808701518051906001600160401b038211610500578190610d9d600488015461221e565b601f81116110c7575b50602090601f83116001146110555760009261104a575b50508160011b916000199060031b1c19161760048501555b60a0870151600585015560068401610dff60c08901511515829060ff801983541691151516179055565b60e0880151151561ff0082549160081b169061ff00191617905561010087015160078501556008840160018060a01b03610120890151166bffffffffffffffffffffffff60a01b825416179055610140870151928351976001600160401b038911610500576020988895610e76600989015461221e565b601f8111611017575b508a90601f8311600114610f7657610f509493837f2c99cc9c7e043c62a4e31fde7a935b24aeeb92abc6e08ddd792f3b4668910ca5999a94600a9461016094600092610f6b575b50508160011b916000199060031b1c19161760098501555b01519101553360005260068952610ef9866040600020612509565b610f20866040518b818551610f118183858a01612356565b81016008815203019020612509565b610f2b60015461253e565b600155610f4360405194608086526080860190612379565b908482038a860152612379565b946040830152151560608201528033940390a3604051908152f35b015190508f80610ec6565b97929190600984016000528b6000209860005b601f1984168110610ffd5750926001837f2c99cc9c7e043c62a4e31fde7a935b24aeeb92abc6e08ddd792f3b4668910ca59a9b61016094610f50999897600a97601f19811610610fe4575b505050811b016009850155610ede565b015160001960f88460031b161c191690558f8080610fd4565b828201518b556001909a01998c9950918d01918d01610f89565b6110449060098a016000528c600020601f850160051c8101918e86106104f657601f0160051c01906124f2565b8b610e7f565b015190508980610dbd565b9250600487016000526020600020906000935b601f19841685106110ac576001945083601f19811610611093575b505050811b016004850155610dd5565b015160001960f88460031b161c19169055898080611083565b81810151835560209485019460019093019290910190611068565b6110f690600489016000526020600020601f850160051c810191602086106104f657601f0160051c01906124f2565b8a610da6565b015190508980610d60565b9250600387016000526020600020906000935b601f198416851061115e576001945083601f19811610611145575b505050811b016003850155610d78565b015160001960f88460031b161c19169055898080611135565b8181015183556020948501946001909301929091019061111a565b6111a890600389016000526020600020601f850160051c810191602086106104f657601f0160051c01906124f2565b8a610d49565b015190508980610d03565b9250600287016000526020600020906000935b601f1984168510611210576001945083601f198116106111f7575b505050811b016002850155610d1b565b015160001960f88460031b161c191690558980806111e7565b818101518355602094850194600190930192909101906111cc565b61125a90600289016000526020600020601f850160051c810191602086106104f657601f0160051c01906124f2565b8a610cec565b600092610c05565b600354341015610bed5760405162461bcd60e51b8152602060048201526024808201527f496e73756666696369656e742066656520666f72207072656d69756d207265716044820152631d595cdd60e21b6064820152608490fd5b60405162461bcd60e51b815260206004820152601860248201527f43617465676f72792063616e6e6f7420626520656d70747900000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f4465736372697074696f6e2063616e6e6f7420626520656d70747900000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260156024820152745469746c652063616e6e6f7420626520656d70747960581b6044820152606490fd5b3461014657600036600319011261014657604051600080546113ab8161221e565b8084529060019081811690811561144657506001146113ed575b6113e9846113d58186038261228f565b604051918291602083526020830190612379565b0390f35b600080805292507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061142e5750505081016020016113d5826113c5565b80546020858701810191909152909301928101611416565b60ff191660208087019190915292151560051b850190920192506113d591508390506113c5565b34610146576040366003190112610146576001600160401b036004358181116101465761149e90369060040161240a565b602435828111610146576114b690369060040161240a565b916114c38251151561254d565b3360005260056020918183526040600020845190828211610500576114e8815461221e565b91601f92838111611701575b50808684821160011461169d57600091611692575b508160011b916000199060031b1c19161790555b336000528284526001908160406000200193875193841161050057611542855461221e565b82811161165a575b5050849083116001146115cd579282806103db946115b397947fc13dafd9d9a1258e2f2de748cef0b799dbcc614ed620f5b0564ae615a759795c99976000936115c2575b501b916000199060031b1c19161790555b604051938493604085526040850190612379565b90838203908401523395612379565b8b015192508b61158e565b601f9291921982169084600052856000209160005b8181106116455750927fc13dafd9d9a1258e2f2de748cef0b799dbcc614ed620f5b0564ae615a759795c9795926103db9592826115b399961061162c575b5050811b01905561159f565b8a015160001960f88460031b161c191690558980611620565b898301518455928501929187019187016115e2565b6116829186600052876000209084808801821c8301938a8910611689575b01901c01906124f2565b878061154a565b93508293611678565b905087015189611509565b60008481528881209250601f198416905b898b8383106116ec5750505090836001949392106116d3575b5050811b01905561151d565b89015160001960f88460031b161c1916905589806116c7565b840151855560019094019392830192016116ae565b61172890836000528760002085808501891c8201928a861061172e575b01881c01906124f2565b886114f4565b9250819261171e565b34610146576020366003190112610146576001600160a01b0361175861239e565b166000526009602052602060ff604060002054166040519015158152f35b3461014657602080600319360112610146576004356001600160401b03811161014657816117ab6117be92369060040161240a565b8160405193828580945193849201612356565b8101600881520301902090604051908181845491828152019360005281600020916000905b828210611806576113e9856117fa8189038261228f565b604051918291826123b4565b8354865294850194600193840193909101906117e3565b34610146576000366003190112610146576020600154604051908152f35b3461014657602080600319360112610146576001600160a01b0361185d61239e565b1660005260078152604060002090604051908181845491828152019360005281600020916000905b82821061189c576113e9856117fa8189038261228f565b835486529485019460019384019390910190611885565b34610146576020806003193601126101465760c0906118d061239e565b6040516118dc81612274565b606093818580935282858201526000604082015260008382015260006080820152600060a0820152015260018060a01b0316600052600581526040600020906040519161192883612274565b611931816122b0565b83526001936119418583016122b0565b9083850191825260028301549260408601938452600381015482870190815260048201549060808801918252600660ff6005850154169360a08a0194151585520193845461198e816124db565b9561199c604051978861228f565b81875260009081528981208a88015b838310611a25575050505088995060c06113e99899019485526119fb6119e58a60e06040519d8e9d8e5251918d01526101008c0190612379565b965196601f1997888c83030160408d0152612379565b9651908901525160808801525160a087015251151560c086015251908483030160e085015261247f565b8d8c8192611a32856122b0565b8152019201920191906119ab565b34610146576000366003190112610146576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461014657604036600319011261014657611a9e61239e565b6001600160a01b031660009081526007602052604090208054602435919082101561014657602091611acf91612451565b90546040519160031b1c8152f35b3461014657604036600319011261014657611af661239e565b6001600160a01b031660009081526006602052604090208054602435919082101561014657602091611acf91612451565b34610146576040366003190112610146576004356001600160401b03811161014657611b5790369060040161240a565b611b736020602435928160405193828580945193849201612356565b81016008815203019020805482101561014657602091611acf91612451565b3461014657602080600319360112610146576001600160a01b03611bb461239e565b1660005260068152604060002090604051908181845491828152019360005281600020916000905b828210611bf3576113e9856117fa8189038261228f565b835486529485019460019384019390910190611bdc565b3461014657602036600319011261014657611c2361239e565b6001600160a01b0390611c59337f0000000000000000000000000000000000000000000000000000000000000000841614612601565b1680600052600960205260ff6040600020541615611c915760005260056020526005604060002001600160ff19825416179055600080f35b60405162461bcd60e51b81526020600482015260146024820152732ab9b2b91034b9903737ba1030903432b63832b960611b6044820152606490fd5b34610146576000366003190112610146577f0000000000000000000000000000000000000000000000000000000000000000611d13336001600160a01b03831614612601565b47908115611d7957600080809381935af1611d2c6125d1565b5015611d3457005b60405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f20776974686472617720666565730000000000000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152724e6f206665657320746f20776974686472617760681b6044820152606490fd5b34610146576020366003190112610146576001600160a01b03611dd561239e565b166000526005602052611e2c6040600020611def816122b0565b90611dfc600182016122b0565b6002820154916003810154611e3a60ff60056004850154940154169360405197889760c0895260c0890190612379565b908782036020890152612379565b93604086015260608501526080840152151560a08301520390f35b34610146576000366003190112610146576020600354604051908152f35b3461014657600036600319011261014657608060015460025490479060405192818452602084015260408301526060820152f35b3461014657602036600319011261014657611eec337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614612601565b600435600355005b34610146576020366003190112610146576004356000610160604051611f1981612258565b82815282602082015260606040820152606080820152606060808201528260a08201528260c08201528260e0820152826101008201528261012082015260606101408201520152611f6d6001548210612590565b60005260046020526040600020600a60405191611f8983612258565b8054835260018101546001600160a01b03166020840152611fac600282016122b0565b6040840152611fbd600382016122b0565b6060840152611fce600482016122b0565b6080840152600581015460a0840152600681015460ff818116151560c0860152600891821c16151560e085015260078201546101008501528101546001600160a01b0316610120840152612024600982016122b0565b61014084015201546101608201526040518091602082528051602083015260018060a01b0360208201511660408301526101606121006120a761209161207b604086015161018060608901526101a0880190612379565b6060860151878203601f19016080890152612379565b6080850151868203601f190160a0880152612379565b60a084015160c086015260c0840151151560e086015260e0840151151561010086015261010084015161012086015260018060a01b0361012085015116610140860152610140840151601f198683030184870152612379565b9101516101808301520390f35b3461014657602036600319011261014657600435600052600460205260406000208054600160a01b6001900380600184015416926002810161214e906122b0565b9161215b600383016122b0565b612167600484016122b0565b91600584015492600685015490600786015492600887015416936009870161218e906122b0565b96600a0154976040519a8b9a8b5260208b01526101808060408c01528a016121b591612379565b89810360608b01526121c691612379565b88810360808a01526121d791612379565b9360a088015260ff8116151560c088015260081c60ff16151560e087015261010086015261012085015283810361014085015261221391612379565b906101608301520390f35b90600182811c9216801561224e575b602083101461223857565b634e487b7160e01b600052602260045260246000fd5b91607f169161222d565b61018081019081106001600160401b0382111761050057604052565b60e081019081106001600160401b0382111761050057604052565b90601f801991011681019081106001600160401b0382111761050057604052565b90604051918260008254926122c48461221e565b90818452600194858116908160001461233357506001146122f0575b50506122ee9250038361228f565b565b9093915060005260209081600020936000915b81831061231b5750506122ee935082010138806122e0565b85548884018501529485019487945091830191612303565b9150506122ee94506020925060ff191682840152151560051b82010138806122e0565b60005b8381106123695750506000910152565b8181015183820152602001612359565b9060209161239281518092818552858086019101612356565b601f01601f1916010190565b600435906001600160a01b038216820361014657565b6020908160408183019282815285518094520193019160005b8281106123db575050505090565b8351855293810193928101926001016123cd565b6001600160401b03811161050057601f01601f191660200190565b81601f8201121561014657803590612421826123ef565b9261242f604051948561228f565b8284526020838301011161014657816000926020809301838601378301015290565b80548210156124695760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b908082519081815260208091019281808460051b8301019501936000915b8483106124ad5750505050505090565b90919293949584806124cb600193601f198682030187528a51612379565b980193019301919493929061249d565b6001600160401b0381116105005760051b60200190565b8181106124fd575050565b600081556001016124f2565b8054600160401b8110156105005761252691600182018155612451565b819291549060031b91821b91600019901b1916179055565b60001981146109c95760010190565b1561255457565b60405162461bcd60e51b81526020600482015260146024820152734e616d652063616e6e6f7420626520656d70747960601b6044820152606490fd5b1561259757565b60405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c995c5d595cdd08125160721b6044820152606490fd5b3d156125fc573d906125e2826123ef565b916125f0604051938461228f565b82523d6000602084013e565b606090565b1561260857565b60405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329037bbb732b960991b6044820152606490fdfea264697066735822122069b4d620c70f1085c396d9f438afb4439a3084494d50b8b0953d777b076efb6d64736f6c63430008140033",
  "devdoc": {
    "author": "SafeNest Team",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createHelpRequest(string,string,string,bool)": {
        "notice": "Create a new help request"
      },
      "getHelpRequest(uint256)": {
        "notice": "Get help request details"
      },
      "getHelpRequestsByCategory(string)": {
        "notice": "Get help requests by category"
      },
      "getPlatformStats()": {
        "notice": "Get platform statistics"
      },
      "getUserHelpProvided(address)": {
        "notice": "Get user's help provided"
      },
      "getUserHelpRequests(address)": {
        "notice": "Get user's help requests"
      },
      "getUserProfile(address)": {
        "notice": "Get user profile"
      },
      "provideHelp(uint256,string)": {
        "notice": "Provide help for a request"
      },
      "registerAsHelper(string,string,string[])": {
        "notice": "Register as a helper"
      },
      "setPlatformFee(uint256)": {
        "notice": "Set platform fee (only owner)"
      },
      "updateProfile(string,string)": {
        "notice": "Update user profile"
      },
      "verifyHelper(address)": {
        "notice": "Verify a helper (only owner)"
      },
      "withdrawFees()": {
        "notice": "Withdraw platform fees (only owner)"
      }
    },
    "notice": "SafeNest - A decentralized help and support system Allows users to request help, provide assistance, and manage community support",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11200,
        "contract": "contracts/YourContract.sol:SafeNest",
        "label": "platformName",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 11203,
        "contract": "contracts/YourContract.sol:SafeNest",
        "label": "totalHelpRequests",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 11206,
        "contract": "contracts/YourContract.sol:SafeNest",
        "label": "totalHelpProvided",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11209,
        "contract": "contracts/YourContract.sol:SafeNest",
        "label": "platformFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 11255,
        "contract": "contracts/YourContract.sol:SafeNest",
        "label": "helpRequests",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(HelpRequest)11234_storage)"
      },
      {
        "astId": 11260,
        "contract": "contracts/YourContract.sol:SafeNest",
        "label": "userProfiles",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(UserProfile)11250_storage)"
      },
      {
        "astId": 11265,
        "contract": "contracts/YourContract.sol:SafeNest",
        "label": "userHelpRequests",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 11270,
        "contract": "contracts/YourContract.sol:SafeNest",
        "label": "userHelpProvided",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 11275,
        "contract": "contracts/YourContract.sol:SafeNest",
        "label": "categoryRequests",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 11279,
        "contract": "contracts/YourContract.sol:SafeNest",
        "label": "isHelper",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserProfile)11250_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SafeNest.UserProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(UserProfile)11250_storage"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(HelpRequest)11234_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SafeNest.HelpRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(HelpRequest)11234_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(HelpRequest)11234_storage": {
        "encoding": "inplace",
        "label": "struct SafeNest.HelpRequest",
        "members": [
          {
            "astId": 11211,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11213,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "requester",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11215,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "title",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 11217,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 11219,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "category",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 11221,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "reward",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 11223,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "isResolved",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 11225,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "isPremium",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 11227,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "createdAt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 11229,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "helper",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 11231,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "solution",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 11233,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "resolvedAt",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(UserProfile)11250_storage": {
        "encoding": "inplace",
        "label": "struct SafeNest.UserProfile",
        "members": [
          {
            "astId": 11236,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 11238,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "bio",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 11240,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "helpRequestsCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11242,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "helpProvidedCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11244,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "reputation",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11246,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "isVerified",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 11249,
            "contract": "contracts/YourContract.sol:SafeNest",
            "label": "skills",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}